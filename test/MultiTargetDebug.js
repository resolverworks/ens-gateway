import {MultiExpander} from '../src/evm-storage-multi.js';
import {CHAIN_BASE, create_provider_pair} from '../src/providers.js';
import {ethers} from 'ethers';

let {provider1, provider2} = create_provider_pair(CHAIN_BASE);

// https://basescan.org/address/0x0f1449c980253b576aba379b11d453ac20832a89#code

let abi = new ethers.Interface([
	`function fetch(bytes memory context, 
		uint16 outputs,
		bytes memory ops, 
		bytes[] memory inputs
	) external pure returns (bytes memory witness)`
]);

let res = abi.decodeFunctionData('fetch', '0x9669659e0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001003000108000103010408000201030204000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000f1449c980253b576aba379b11d453ac20832a890000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000009');

// let L2OutputOracle = new ethers.Contract('0x56315b90c40730925ec5485cf004d835058518A0', [
// 	'function latestOutputIndex() external view returns (uint256)',
// 	'function getL2Output(uint256 outputIndex) external view returns (tuple(bytes32 outputRoot, uint128 t, uint128 block))',
// ], provider1);
// let output = await L2OutputOracle.latestOutputIndex();
// let {block} = await L2OutputOracle.getL2Output(output);
let block = ethers.toBeHex(13491000n);

let {outputs, ops, inputs} = res;
outputs = Number(outputs);
ops = ethers.getBytes(ops);


let me = new MultiExpander(provider2, block, ops, inputs);

console.log(await me.expand(outputs));